1. Insert operation using a loop instead of recursion 

1.1 Create our datatype node 


package com.vibol.Datastructure.tree.excercise;

public class Node {
	int data;
	Node left, right;

	Node(int value){
		data = value;
		left = right = null; 
	}
}

1.2 : Crate Class BinarySearchTreeLoop

Method : insert ( to store the value to left or right ) 
---------------------------------------

	Node root;

	public Node insert(Node node, int value) {
		if (node == null) {
			return new Node(value);
		}
		if (value < node.data) {
			node.left = insert(node.left, value);
		} else if (value > node.data) {
			node.right = insert(node.right, value);
		}
		return node;
	}


----------------------------------------------

Correct Home work : Crate method insertUsingLoop (using while) 

public void insertUsingLoop(int value) {
		Node newNode = new Node(value);

		// check if Tree is empty
		if (root == null) {
			root = newNode;
			return;
		}

		// Find parent node to add child

		Node currentNode = root;
		Node parentNode = null;

		while (currentNode != null) {
			parentNode = currentNode;
			if (value < currentNode.data) {
				currentNode = currentNode.left;
			} else if (value > currentNode.data) {
				currentNode = currentNode.right;
			} else {
				return; // Duplicate value not allowed (currentNode.data = value they input)
			}
		}

		// Link newNode to the appropriate side of parent

		if (value < parentNode.data) {
			parentNode.left = newNode;
		} else {
			parentNode.right = newNode;
		}

	}

	// function print node
	public void inorder(Node node) {
		if (node != null) {
			// left , root, right : in order print
			inorder(node.left);
			System.out.print(node.data + " ");
			inorder(node.right);
		}
	}


2. App running 

public class BSTExcerciseApplication {
	public static void main(String[] args) {
		BinarySearchTreeLoop tree = new BinarySearchTreeLoop();
		
		// insert element to tree using loop 
		int[] values = {50,30,70,20,40,60,80};
		for(int value: values) {
			tree.insertUsingLoop(value);
		}
		
		System.out.println("=================");
		tree.inorder(tree.root);


==> result : 20 30 40 50 60 70 80 



















































